{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/audio/audio.component.ts","webpack:///src/app/audio/audio.component.html","webpack:///src/app/audio/audio.service.ts","webpack:///src/app/file/file.component.ts","webpack:///src/app/file/file.component.html","webpack:///src/app/file/file.service.ts","webpack:///src/app/imageupload/imageupload.component.ts","webpack:///src/app/imageupload/imageupload.component.html","webpack:///src/app/imageupload/imageupload.service.ts","webpack:///src/app/microsoft-services/microsoft-services.component.ts","webpack:///src/app/microsoft-services/microsoft-services.component.html","webpack:///src/app/text/text.component.ts","webpack:///src/app/text/text.component.html","webpack:///src/app/text/text.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts","webpack:///fs (ignored)","webpack:///https-proxy-agent (ignored)","webpack:///ws (ignored)","webpack:///external/ocsp/ocsp (ignored)"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AudioComponent","audioService","loading","myForm","file","required","fileSource","speechProcessing","recognizing","lastRecognized","currentLanguage","languageList","value","text","targetLanguages","event","target","files","length","selectedFile","filename","name","selectLanguage","nativeElement","subscription","submitFormData","subscribe","res","showText","toString","unsubscribe","reset","err","console","log","recognizeSpeechStop","recognizeSpeechStart","recognizer","initSpeechService","recognized","recognizerCallback","bind","startContinuousRecognitionAsync","stopContinuousRecognitionAsync","stopRecognizerCallback","error","s","reason","result","close","initTranslateService","targetLanguage","recognizeOnceAsync","evt","TranslatedSpeech","spokenText","translations","get","NoMatch","submit","onFileChange","onLanguageChange","translateSpeechToText","AudioService","http","requestFile","fd","FormData","append","post","audioConfig","fromDefaultMicrophoneInput","speechConfig","fromSubscription","API_KEY","REGION","speechRecognitionLanguage","enableDictation","sourceLanguage","translateConfig","addTargetLanguage","FileComponent","fileService","filePassword","fileTypeSelected","fileTypeList","responseTypeList","selectFileType","responseTypeSelect","urlInput","onFileTypeChange","submitURL","FileService","fileType","resultType","data","ImageuploadComponent","imageUploadService","recognizeSelected","selectedLanguage","resultArray","reader","FileReader","readAsDataURL","onload","imageSrc","patchValue","selectService","recognizeMode","success","userMessage","submitForm","service","ocr","recognize","batchanalyze","ImageuploadService","language","selectedService","tesseractImageProcess","cognitiveServieImageProcess","tesseractRemoteImageProcess","cognitiveServiceRemoteImageProcess","image","MicrosoftServicesComponent","activeTab","search","TextComponent","textService","sourceText","resultObject","getTranslation","find","x","TextService","request","providedIn","environment","production","SPEECH_CONFIG","domain","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MicrosoftServicesComponent } from './microsoft-services/microsoft-services.component';\r\nimport { FileComponent } from './file/file.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  { path: 'microsoftservices', component: MicrosoftServicesComponent },\r\n  { path: 'formrecognizer', component: FileComponent },\r\n  { path: '', redirectTo: '/microsoftservices', pathMatch: 'full' },\r\n  { path: '**', redirectTo: '/microsoftservices', pathMatch: 'full' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.css\"],\r\n})\r\nexport class AppComponent {\r\n}\r\n","<router-outlet></router-outlet> \r\n","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { NgModule } from \"@angular/core\";\r\n\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { ImageuploadComponent } from \"./imageupload/imageupload.component\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ImageuploadService } from \"./imageupload/imageupload.service\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { AudioComponent } from \"./audio/audio.component\";\r\nimport { AudioService } from \"./audio/audio.service\";\r\nimport { FileComponent } from './file/file.component';\r\nimport { FileService } from './file/file.service';\r\nimport { TextComponent } from './text/text.component';\nimport { MicrosoftServicesComponent } from './microsoft-services/microsoft-services.component';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, ImageuploadComponent, AudioComponent, FileComponent, TextComponent, MicrosoftServicesComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n  ],\r\n  providers: [ImageuploadService, AudioService, FileService],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit, ViewChild, ElementRef } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { AudioService } from \"./audio.service\";\r\nimport {\r\n  ResultReason,\r\n  SpeechRecognizer,\r\n} from \"microsoft-cognitiveservices-speech-sdk\";\r\n\r\n@Component({\r\n  selector: \"app-audio\",\r\n  templateUrl: \"./audio.component.html\",\r\n  styleUrls: [\"./audio.component.css\"],\r\n})\r\nexport class AudioComponent implements OnInit {\r\n  loading: boolean = false;\r\n  myForm = new FormGroup({\r\n    file: new FormControl(\"\", [Validators.required]),\r\n    fileSource: new FormControl(\"\", [Validators.required]),\r\n  });\r\n  selectedFile: File;\r\n  showText: string;\r\n  filename: string;\r\n  speechProcessing: boolean = false;\r\n  spokenText: string;\r\n\r\n  recognizing: boolean = false;\r\n  lastRecognized: string = \"\";\r\n  recognizer: SpeechRecognizer;\r\n  currentLanguage: string = \"en-IN\";\r\n  @ViewChild(\"selectLanguage\") selectLanguage: ElementRef;\r\n  @ViewChild(\"targetLanguage\") targetLanguage: ElementRef;\r\n  languageList = [\r\n    {\r\n      value: \"en-IN\",\r\n      text: \"English (India)\",\r\n    },\r\n    {\r\n      value: \"en-US\",\r\n      text: \"English (United States)\",\r\n    },\r\n    {\r\n      value: \"hi-IN\",\r\n      text: \"Hindi (India)\",\r\n    },\r\n    {\r\n      value: \"en-GB\",\r\n      text: \"English (United Kingdom)\",\r\n    },\r\n  ];\r\n\r\n  targetLanguages = [\r\n    {\r\n      value: \"en\",\r\n      text: \"English\",\r\n    },\r\n    {\r\n      value: \"hi\",\r\n      text: \"Hindi\",\r\n    },\r\n    {\r\n      value: \"pa\",\r\n      text: \"Punjabi\",\r\n    },\r\n  ];\r\n\r\n  constructor(private audioService: AudioService) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onFileChange(event: any) {\r\n    if (event.target.files && event.target.files.length) {\r\n      const [file] = event.target.files;\r\n      this.selectedFile = file;\r\n      this.filename = file.name;\r\n    }\r\n  }\r\n\r\n  onLanguageChange() {\r\n    this.currentLanguage = this.selectLanguage.nativeElement.value;\r\n  }\r\n\r\n  submit() {\r\n    this.loading = true;\r\n    var subscription = this.audioService\r\n      .submitFormData(this.selectedFile)\r\n      .subscribe(\r\n        (res) => {\r\n          this.showText = res ? res.toString() : \"\";\r\n          subscription.unsubscribe();\r\n          this.myForm.reset();\r\n          this.selectedFile = null;\r\n          this.filename = \"\";\r\n          this.loading = false;\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n          subscription.unsubscribe();\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  speechRecognizing() {\r\n    if (this.recognizing) {\r\n      this.recognizeSpeechStop();\r\n    } else {\r\n      this.recognizing = true;\r\n      this.recognizeSpeechStart();\r\n    }\r\n  }\r\n\r\n  recognizeSpeechStart() {\r\n    this.recognizer = this.audioService.initSpeechService(this.currentLanguage);\r\n    this.recognizer.recognizing = this.recognizer.recognized = this.recognizerCallback.bind(\r\n      this\r\n    );\r\n    this.recognizer.startContinuousRecognitionAsync();\r\n  }\r\n\r\n  recognizeSpeechStop() {\r\n    this.recognizer.stopContinuousRecognitionAsync(\r\n      this.stopRecognizerCallback.bind(this),\r\n\r\n      (err) => {\r\n        this.stopRecognizerCallback.bind(this);\r\n        console.error(err);\r\n      }\r\n    );\r\n  }\r\n\r\n  recognizerCallback(s, e) {\r\n    const reason = ResultReason[e.result.reason];\r\n\r\n    if (reason == \"RecognizingSpeech\") {\r\n      this.showText = this.lastRecognized + e.result.text;\r\n    }\r\n    if (reason == \"RecognizedSpeech\") {\r\n      this.lastRecognized += e.result.text + \"\\r\\n\";\r\n      this.showText = this.lastRecognized;\r\n    }\r\n    if (reason == \"NoMatch\") {\r\n    }\r\n  }\r\n\r\n  stopRecognizerCallback() {\r\n    this.recognizer.close();\r\n    this.recognizer = null;\r\n    this.recognizing = false;\r\n  }\r\n\r\n  translateSpeechToText() {\r\n    let recognizer = this.audioService.initTranslateService(\r\n      this.currentLanguage,\r\n      this.targetLanguage.nativeElement.value\r\n    );\r\n\r\n    recognizer.recognizeOnceAsync((evt) => {\r\n      if (evt.reason == ResultReason.TranslatedSpeech) {\r\n        this.spokenText = evt.text;\r\n        this.showText = evt.translations.get(\r\n          this.targetLanguage.nativeElement.value\r\n        );\r\n        recognizer.close();\r\n      }\r\n      if (evt.reason == ResultReason.NoMatch) {\r\n        recognizer.close();\r\n      }\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this.showText = \"\";\r\n    this.lastRecognized = \"\";\r\n    this.spokenText = \"\";\r\n  }\r\n}\r\n","<div *ngIf=\"loading\" class=\"spinner-border text-info\" role=\"status\">\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"submit()\">\r\n      <label><b>Upload Audio File</b></label> <br />\r\n      <div class=\"btn btn-success btn-file\">\r\n        Upload\r\n        <input\r\n          formControlName=\"file\"\r\n          type=\"file\"\r\n          id=\"input-audio-file\"\r\n          (change)=\"onFileChange($event)\"\r\n        />\r\n      </div>\r\n      <p *ngIf=\"filename\">{{ filename }}</p>\r\n      <br /><br /><button\r\n        *ngIf=\"selectedFile\"\r\n        class=\"btn btn-primary\"\r\n        type=\"submit\"\r\n      >\r\n        Submit\r\n      </button>\r\n    </form>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-2 mt-4\">\r\n      <button\r\n        class=\"btn btn-primary\"\r\n        *ngIf=\"!recognizing\"\r\n        (click)=\"speechRecognizing()\"\r\n      >\r\n        Speak\r\n      </button>\r\n      <button\r\n        class=\"btn btn-danger\"\r\n        *ngIf=\"recognizing\"\r\n        (click)=\"speechRecognizing()\"\r\n      >\r\n        Stop\r\n      </button>\r\n    </div>\r\n    <div class=\"col-md-4\">\r\n      <label><b>Select Your Language</b></label>\r\n      <select\r\n        class=\"form-control\"\r\n        (change)=\"onLanguageChange()\"\r\n        #selectLanguage\r\n      >\r\n        <option *ngFor=\"let option of languageList\" [value]=\"option.value\">{{\r\n          option.text\r\n        }}</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <div class=\"row\">\r\n    <div class=\"col-md-2 mt-4\">\r\n      <button class=\"btn btn-primary\" (click)=\"translateSpeechToText()\">\r\n        Speak To Translate\r\n      </button>\r\n    </div>\r\n    <div class=\"col-md-5\">\r\n      <label><b>Select Source Language</b></label>\r\n      <select\r\n        class=\"form-control\"\r\n        (change)=\"onLanguageChange()\"\r\n        #selectLanguage\r\n      >\r\n        <option *ngFor=\"let option of languageList\" [value]=\"option.value\">{{\r\n          option.text\r\n        }}</option>\r\n      </select>\r\n    </div>\r\n    <div class=\"col-md-5\">\r\n      <label><b>Select Target Language</b></label>\r\n      <select class=\"form-control\" #targetLanguage>\r\n        <option *ngFor=\"let option of targetLanguages\" [value]=\"option.value\">{{\r\n          option.text\r\n        }}</option>\r\n      </select>\r\n    </div>\r\n  </div>\r\n\r\n  <hr />\r\n\r\n  <div class=\"row\">\r\n    <label><b>Result: </b></label>\r\n    <br />\r\n\r\n    <p *ngIf=\"spokenText\" class=\"spoken-text\">{{ spokenText }}</p>\r\n    <p class=\"result-text\" *ngIf=\"showText\">{{ showText }}</p>\r\n    <button *ngIf=\"showText\" class=\"btn btn-danger\" (click)=\"reset()\">\r\n      Clear\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\n\r\nimport { domain } from \"../../environments/environment\";\r\nimport {\r\n  AudioConfig,\r\n  SpeechConfig,\r\n  SpeechRecognizer,\r\n  TranslationRecognizer,\r\n  SpeechTranslationConfig,\r\n} from \"microsoft-cognitiveservices-speech-sdk\";\r\nimport { SPEECH_CONFIG } from \"../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class AudioService {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  submitFormData(requestFile: File) {\r\n    let fd = new FormData();\r\n    fd.append(\"file\", requestFile, requestFile.name);\r\n    return this.http.post(`${domain}/api/audio/recognize`, fd);\r\n  }\r\n\r\n  initSpeechService(currentLanguage: string) {\r\n    const audioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n    const speechConfig = SpeechConfig.fromSubscription(\r\n      SPEECH_CONFIG.API_KEY,\r\n      SPEECH_CONFIG.REGION\r\n    );\r\n    speechConfig.speechRecognitionLanguage = currentLanguage;\r\n    speechConfig.enableDictation();\r\n    return new SpeechRecognizer(speechConfig, audioConfig);\r\n  }\r\n\r\n  initTranslateService(sourceLanguage: string, targetLanguage: string) {\r\n    const audioConfig = AudioConfig.fromDefaultMicrophoneInput();\r\n    const translateConfig = SpeechTranslationConfig.fromSubscription(\r\n      SPEECH_CONFIG.API_KEY,\r\n      SPEECH_CONFIG.REGION\r\n    );\r\n    translateConfig.speechRecognitionLanguage = sourceLanguage;\r\n    translateConfig.addTargetLanguage(targetLanguage);\r\n    translateConfig.enableDictation();\r\n    return new TranslationRecognizer(translateConfig, audioConfig);\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { FileService } from './file.service';\r\nimport { viewClassName } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'app-file',\r\n  templateUrl: './file.component.html',\r\n  styleUrls: ['./file.component.css']\r\n})\r\nexport class FileComponent implements OnInit {\r\n\r\n  loading: boolean = false;\r\n  myForm = new FormGroup({\r\n    file: new FormControl(\"\", [Validators.required]),\r\n    fileSource: new FormControl(\"\", [Validators.required]),\r\n    filePassword: new FormControl(\"\", [Validators.required])\r\n  });\r\n  selectedFile: File;\r\n  showText: string;\r\n  filename: string;\r\n  fileTypeSelected: string = \"pdf\";\r\n  @ViewChild('urlInput') urlInput: ElementRef;\r\n  @ViewChild('selectFileType') selectFileType: ElementRef;\r\n  @ViewChild('responseTypeSelect') responseTypeSelect: ElementRef;\r\n  fileTypeList = [\r\n    {\r\n      value: \"pdf\",\r\n      text: \"PDF\"\r\n    },\r\n    {\r\n      value: \"png\",\r\n      text: \"PNG\"\r\n    },\r\n    {\r\n      value: \"jpeg\",\r\n      text: \"JPG/JPEG\"\r\n    },\r\n    {\r\n      value: \"tiff\",\r\n      text: \"TIFF\"\r\n    },\r\n  ]\r\n\r\n  responseTypeList = [\r\n    {\r\n      value: \"text\",\r\n      text: \"Get file text in reponse\"\r\n    },\r\n    {\r\n      value: \"json\",\r\n      text: \"Get raw JSON response\"\r\n    }\r\n  ]\r\n\r\n  constructor(private fileService: FileService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onFileChange(event: any) {\r\n    if (event.target.files && event.target.files.length) {\r\n      const [file] = event.target.files;\r\n      this.selectedFile = file;\r\n      this.filename = file.name;\r\n    }\r\n  }\r\n\r\n  onFileTypeChange() {\r\n    this.fileTypeSelected = this.selectFileType.nativeElement.value;\r\n  }\r\n\r\n  submit() {\r\n    this.loading = true;\r\n    var subscription = this.fileService\r\n      .submitFormData(this.selectedFile, this.myForm.value.filePassword, this.fileTypeSelected, this.responseTypeSelect.nativeElement.value)\r\n      .subscribe(\r\n        (res) => {\r\n          this.showText = res ? res.toString() : \"\";\r\n          subscription.unsubscribe();\r\n          this.myForm.reset();\r\n          this.selectedFile = null;\r\n          this.filename = \"\";\r\n          this.loading = false;\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n          subscription.unsubscribe();\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  submitURL() {\r\n    this.loading = true;\r\n    var subscription = this.fileService\r\n      .submit(this.urlInput.nativeElement.value, this.responseTypeSelect.nativeElement.value)\r\n      .subscribe(\r\n        (res) => {\r\n          this.showText = res ? res.toString() : \"\";\r\n          subscription.unsubscribe();\r\n          this.urlInput.nativeElement.value = \"\";\r\n          this.loading = false;\r\n        },\r\n        (err) => {\r\n          console.log(err);\r\n          subscription.unsubscribe();\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  reset() {\r\n    this.showText = \"\";\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"loading\" class=\"spinner-border text-info\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"container\">\r\n      <div class=\"row\">\r\n            <label class=\"col-md-4\"><strong>Select Response Type</strong></label>\r\n            <select id=\"responseTypeSelect\" class=\"form-control col-md-6\" #responseTypeSelect>\r\n                  <option *ngFor=\"let option of responseTypeList\" [value]=\"option.value\">\r\n                        {{option.text}}\r\n                  </option>\r\n            </select>\r\n      </div>\r\n      <hr>\r\n      <div class=\"row\">\r\n            <form [formGroup]=\"myForm\" (ngSubmit)=\"submit()\" class=\"col-md-5\">\r\n\r\n                  <div *ngIf=\"fileTypeSelected == 'pdf'\">\r\n                        <input type=\"password\" id=\"filePassword\" placeholder=\"Enter file password (if any)\"\r\n                              class=\"form-control\" formControlName=\"filePassword\" />\r\n\r\n                        <br />\r\n                  </div>\r\n\r\n                  <label><b>Upload File</b></label> <br />\r\n                  <div class=\"btn btn-success btn-file\">\r\n                        Upload\r\n                        <input formControlName=\"file\" type=\"file\" id=\"input-file\" (change)=\"onFileChange($event)\" />\r\n                  </div>\r\n\r\n                  <p *ngIf=\"filename\">{{ filename }}</p>\r\n\r\n                  <br /><br />\r\n                  <button *ngIf=\"selectedFile\" class=\"btn btn-primary\" type=\"submit\">\r\n                        Submit\r\n                  </button>\r\n            </form>\r\n\r\n            <label><b>Select File Type</b></label>\r\n            <div class=\"col-md-4\">\r\n                  <select class=\"form-control\" #selectFileType (change)=\"onFileTypeChange()\">\r\n                        <option *ngFor=\"let option of fileTypeList\" [value]=\"option.value\">\r\n                              {{option.text}}\r\n                        </option>\r\n                  </select>\r\n            </div>\r\n      </div>\r\n\r\n      <hr />\r\n      <div class=\"row\">\r\n            <label><b>Paste File URL</b></label>\r\n            <input class=\"form-control\" id=\"input-url\" type=\"url\" placeholder=\"Enter/ paste image url\" #urlInput />\r\n\r\n            <br /><br /><button class=\"btn btn-primary\" (click)=\"submitURL()\">\r\n                  Submit\r\n            </button>\r\n      </div>\r\n\r\n      <hr />\r\n      <div class=\"row\">\r\n            <label><b>Result: </b></label>\r\n            <br />\r\n            <p class=\"result-text\" *ngIf=\"showText\">{{ showText }}</p>\r\n            <button *ngIf=\"showText\" class=\"btn btn-danger\" (click)=\"reset()\">\r\n                  Clear\r\n            </button>\r\n      </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { domain } from \"../../environments/environment\";\r\n\r\n@Injectable()\r\nexport class FileService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  submitFormData(requestFile: File, filePassword: string, fileType: string, resultType: string = \"text\") {\r\n    let fd = new FormData();\r\n    fd.append(\"file\", requestFile, requestFile.name);\r\n    fd.append(\"fileType\", fileType);\r\n    fd.append(\"filePassword\", filePassword);\r\n    fd.append(\"resultType\", resultType);\r\n    return this.http.post(`${domain}/api/form/analyze/local`, fd);\r\n  }\r\n\r\n  submit(\r\n    requestFile: string, resultType: string = \"text\"\r\n  ) {\r\n    let data = {\r\n      file: requestFile,\r\n      resultType\r\n    };\r\n\r\n    return this.http.post(\r\n      `${domain}/api/form/analyze`,\r\n      data\r\n    );\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n} from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators } from \"@angular/forms\";\r\nimport { ImageuploadService } from \"./imageupload.service\";\r\n\r\n@Component({\r\n  selector: \"app-imageupload\",\r\n  templateUrl: \"./imageupload.component.html\",\r\n  styleUrls: [\"./imageupload.component.css\"],\r\n})\r\nexport class ImageuploadComponent implements OnInit {\r\n  loading: boolean = false;\r\n  imageSrc: string;\r\n  myForm = new FormGroup({\r\n    file: new FormControl(\"\", [Validators.required]),\r\n    fileSource: new FormControl(\"\", [Validators.required]),\r\n  });\r\n  showText: string;\r\n  @ViewChild(\"urlInput\") urlInput: ElementRef;\r\n  @ViewChild(\"selectService\") selectService: ElementRef;\r\n  @ViewChild(\"selectRecognizeOption\") recognizeMode: ElementRef;\r\n  recognizeSelected: boolean = false;\r\n  selectedFile: File;\r\n  languageList = [\r\n    {\r\n      value: \"en\",\r\n      text: \"English\"\r\n    },\r\n    {\r\n      value: \"hi\",\r\n      text: \"Hindi\"\r\n    }\r\n  ]\r\n  selectedLanguage = \"en\";\r\n  resultArray = [];\r\n\r\n  constructor(private imageUploadService: ImageuploadService) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  onFileChange(event: any) {\r\n    const reader = new FileReader();\r\n\r\n    if (event.target.files && event.target.files.length) {\r\n      const [file] = event.target.files;\r\n      reader.readAsDataURL(file);\r\n      this.selectedFile = file;\r\n\r\n      reader.onload = () => {\r\n        this.imageSrc = reader.result as string;\r\n\r\n        this.myForm.patchValue({\r\n          fileSource: reader.result,\r\n        });\r\n      };\r\n    }\r\n  }\r\n\r\n  submit() {\r\n    this.loading = true;\r\n    var subscription = this.imageUploadService\r\n      .submitFormData(\r\n        this.selectedLanguage,\r\n        this.selectedFile,\r\n        this.selectService ? this.selectService.nativeElement.value : \"\",\r\n        this.recognizeMode ? this.recognizeMode.nativeElement.value : \"\"\r\n      )\r\n      .subscribe(\r\n        (res: any) => {\r\n          if (res.success) {\r\n            if (typeof (res.data) == \"string\") {\r\n              this.showText = res.data.toString();\r\n            }\r\n            else {\r\n              this.resultArray = res.data;\r\n            }\r\n\r\n          } else {\r\n            this.showText = res.userMessage;\r\n          }\r\n          subscription.unsubscribe();\r\n          this.myForm.reset();\r\n          this.imageSrc = \"\";\r\n          this.loading = false;\r\n        },\r\n        (err) => {\r\n          console.log(err[\"error\"]);\r\n          subscription.unsubscribe();\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  submitURL() {\r\n    this.loading = true;\r\n    var subscription = this.imageUploadService\r\n      .submitForm(\r\n        this.selectedLanguage,\r\n        this.urlInput ? this.urlInput.nativeElement.value : \"\",\r\n        this.selectService ? this.selectService.nativeElement.value : \"\",\r\n        this.recognizeMode ? this.recognizeMode.nativeElement.value : \"\"\r\n      )\r\n      .subscribe(\r\n        (res: any) => {\r\n          if (res.success) {\r\n            if (typeof (res.data) == \"string\") {\r\n              this.showText = res.data.toString();\r\n            }\r\n            else {\r\n              this.resultArray = res.data;\r\n            }\r\n\r\n          } else {\r\n            this.showText = res.userMessage;\r\n          }\r\n          subscription.unsubscribe();\r\n          this.urlInput.nativeElement.value = \"\";\r\n          this.loading = false;\r\n        },\r\n        (err) => {\r\n          console.log(err[\"error\"]);\r\n          subscription.unsubscribe();\r\n          this.loading = false;\r\n        }\r\n      );\r\n  }\r\n\r\n  reset() {\r\n    this.showText = \"\";\r\n    this.resultArray = [];\r\n  }\r\n\r\n  onServiceSelection() {\r\n    if (this.selectService.nativeElement.value == \"recognize\") {\r\n      this.recognizeSelected = true;\r\n    } else {\r\n      this.recognizeSelected = false;\r\n    }\r\n  }\r\n\r\n  onLanguageChange(event: any) {\r\n    this.selectedLanguage = event.target.value;\r\n    this.recognizeSelected = false\r\n  }\r\n}\r\n","<div *ngIf=\"loading\" class=\"spinner-border text-info\" role=\"status\">\r\n  <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n\r\n    <!-- <div class=\"col-md-4\">\r\n      <label><strong>Select Language</strong></label>\r\n      <select class=\"form-control\" (change)=\"onLanguageChange($event)\">\r\n        <option *ngFor=\"let option of languageList\" [value]=\"option.value\">{{option.text}}</option>\r\n      </select>\r\n    </div> -->\r\n\r\n    <div class=\"col-md-6\" *ngIf=\"selectedLanguage != 'hi'\">\r\n      <label><b>Select service end point</b></label>\r\n      <select class=\"form-control\" #selectService (change)=\"onServiceSelection()\">\r\n        <option value=\"ocr\">Use OCR End Point</option>\r\n        <option value=\"recognize\">Use Recognize End Point</option>\r\n        <option value=\"batchanalyze\">Use Batch Analyze End Point</option>\r\n      </select>\r\n    </div>\r\n\r\n    <div *ngIf=\"recognizeSelected && selectedLanguage != 'hi'\" class=\"row col-md-6\">\r\n      <label><b>Select Recognition mode</b></label>\r\n      <select class=\"form-control\" #selectRecognizeOption>\r\n        <option value=\"p\">Printed</option>\r\n        <option value=\"h\">Handwritten</option>\r\n      </select>\r\n    </div>\r\n\r\n    <p *ngIf=\"selectedLanguage == 'hi'\" style=\"margin-top: 12px;margin-left: 14px;margin-bottom: -12px;\">\r\n      <i>\r\n        <strong>NOTE: </strong>\r\n        For language Hindi, we are using Google's Tesseract software (open source). &nbsp;&nbsp;&nbsp;&nbsp;\r\n      </i>\r\n    </p>\r\n  </div>\r\n  <br />\r\n  <hr />\r\n\r\n  <div class=\"row\">\r\n    <form [formGroup]=\"myForm\" (ngSubmit)=\"submit()\">\r\n      <label><b>Upload Image File</b></label> <br />\r\n      <div class=\"btn btn-success btn-file\">\r\n        Upload\r\n        <input formControlName=\"file\" type=\"file\" id=\"input-image-file\" (change)=\"onFileChange($event)\" />\r\n      </div>\r\n\r\n      <br /><br /><button *ngIf=\"imageSrc\" class=\"btn btn-primary\" type=\"submit\">Submit</button>\r\n    </form>\r\n    <img [src]=\"imageSrc\" *ngIf=\"imageSrc\" />\r\n  </div>\r\n\r\n  <hr />\r\n  <div class=\"row\">\r\n    <label><b>Paste Image URL</b></label>\r\n    <input class=\"form-control\" id=\"input-url\" type=\"url\" placeholder=\"Enter/ paste image url\" #urlInput />\r\n\r\n    <br /><br /><button class=\"btn btn-primary\" (click)=\"submitURL()\">\r\n      Submit\r\n    </button>\r\n  </div>\r\n\r\n  <hr />\r\n  <div class=\"row\">\r\n    <label><b>Result: </b></label>\r\n    <br />\r\n    <p class=\"result-text\" *ngIf=\"showText\">{{ showText }}</p>\r\n\r\n    <div class=\"table-responsive table-bordered\" *ngIf=\"resultArray.length\">\r\n      <table class=\"table\">\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\" *ngFor=\"let item of resultArray; index as i\">Text {{i + 1}}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <td *ngFor=\"let item of resultArray\">{{item}}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n\r\n    <button *ngIf=\"showText || resultArray.length\" class=\"btn btn-danger\"\r\n      style=\"margin-top: 10px; margin-bottom: -10px;\" (click)=\"reset()\">\r\n      Clear\r\n    </button>\r\n  </div>\r\n</div>","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { domain } from \"../../environments/environment\";\r\n\r\nvar service = {\r\n  ocr: \"ocr\",\r\n  recognize: \"recognize\",\r\n  batchanalyze: \"batchAnalyze\",\r\n};\r\n\r\n@Injectable()\r\nexport class ImageuploadService {\r\n  constructor(private http: HttpClient) { }\r\n\r\n  submitFormData(language: string, requestFile: File, selectedService: string, recognizeMode: string = \"\") {\r\n    if (language == \"hi\") {\r\n      return this.tesseractImageProcess(requestFile);\r\n    } else {\r\n      return this.cognitiveServieImageProcess(requestFile, selectedService, recognizeMode);\r\n    }\r\n  }\r\n\r\n  submitForm(\r\n    language: string,\r\n    requestFile: string,\r\n    selectedService: string,\r\n    recognizeMode: string = \"\"\r\n  ) {\r\n    if (language == \"hi\") {\r\n      return this.tesseractRemoteImageProcess(requestFile);\r\n    } else {\r\n      return this.cognitiveServiceRemoteImageProcess(requestFile, selectedService, recognizeMode)\r\n    }\r\n  }\r\n\r\n  cognitiveServieImageProcess(\r\n    requestFile: File,\r\n    selectedService: string,\r\n    recognizeMode: string = \"\"\r\n  ) {\r\n    let fd = new FormData();\r\n    fd.append(\"file\", requestFile, requestFile.name);\r\n    fd.append(\"recognizeMode\", recognizeMode);\r\n\r\n    return this.http.post(\r\n      `${domain}/api/image/${service[selectedService]}/local`,\r\n      fd\r\n    );\r\n  }\r\n\r\n  tesseractImageProcess(requestFile: File) {\r\n    let fd = new FormData();\r\n    fd.append(\"file\", requestFile, requestFile.name);\r\n\r\n    return this.http.post(\r\n      `${domain}/api/ocr/hindi/imagelocal`,\r\n      fd\r\n    );\r\n  }\r\n\r\n  cognitiveServiceRemoteImageProcess(requestFile: string, selectedService: string, recognizeMode: string = \"\") {\r\n    let data = {\r\n      image: requestFile,\r\n      recognizeMode,\r\n    };\r\n\r\n    return this.http.post(\r\n      `${domain}/api/image/${service[selectedService]}`,\r\n      data\r\n    );\r\n  }\r\n\r\n  tesseractRemoteImageProcess(requestFile: string) {\r\n    let data = {\r\n      image: requestFile\r\n    };\r\n\r\n    return this.http.post(\r\n      `${domain}/api/ocr/hindi/imageremote`,\r\n      data\r\n    );\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-microsoft-services',\n  templateUrl: './microsoft-services.component.html',\n  styleUrls: ['./microsoft-services.component.css']\n})\nexport class MicrosoftServicesComponent implements OnInit {\n  activeTab = \"image\";\n\n  search(activeTab) {\n    this.activeTab = activeTab;\n  }\n\n  result(activeTab) {\n    this.activeTab = activeTab;\n  }\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div id=\"tabs\" class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-3\">\n            <ul class=\"nav nav-tabs\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link active\" href=\"javascript:void(0)\" [ngClass]=\"{ active: activeTab === 'image' }\"\n                        (click)=\"search('image')\" data-toggle=\"tab\">Computer Vision API Service (Microsoft)</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"javascript:void(0)\" [ngClass]=\"{ active: activeTab === 'audio' }\"\n                        data-toggle=\"tab\" (click)=\"result('audio')\">Speech Service (Microsoft)</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"javascript:void(0)\" [ngClass]=\"{ active: activeTab === 'file' }\"\n                        data-toggle=\"tab\" (click)=\"result('file')\">Form Recognizer Service (Microsoft)</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"javascript:void(0)\" [ngClass]=\"{ active: activeTab === 'text' }\"\n                        data-toggle=\"tab\" (click)=\"result('text')\">Translator Service (Microsoft)</a>\n                </li>\n            </ul>\n        </div>\n        <div class=\"col-md-8\">\n            <br />\n            <div class=\"tab-content\">\n                <div class=\"tab-pane fade show\" id=\"image-section\" [ngClass]=\"{ active: activeTab === 'image' }\">\n                    <app-imageupload></app-imageupload>\n                </div>\n                <div class=\"tab-pane fade show\" id=\"audio-section\" [ngClass]=\"{ active: activeTab === 'audio' }\">\n                    <app-audio></app-audio>\n                </div>\n                <div class=\"tab-pane fade show\" id=\"file-section\" [ngClass]=\"{ active: activeTab === 'file' }\">\n                    <app-file></app-file>\n                </div>\n                <div class=\"tab-pane fade show\" id=\"text-section\" [ngClass]=\"{ active: activeTab === 'text' }\">\n                    <app-text></app-text>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { TextService } from './text.service';\r\n\r\n@Component({\r\n  selector: 'app-text',\r\n  templateUrl: './text.component.html',\r\n  styleUrls: ['./text.component.css']\r\n})\r\nexport class TextComponent implements OnInit {\r\n\r\n  loading: boolean = false;\r\n  myForm = new FormGroup({\r\n    sourceText: new FormControl(\"\", [Validators.required]),\r\n    targetLanguage: new FormControl(\"\", [Validators.required]),\r\n  });\r\n  selectedLanguage = \"en\";\r\n  showText: string = \"\";\r\n  resultObject = null;\r\n  targetLanguages = [\r\n    {\r\n      value: \"en\",\r\n      text: \"English\"\r\n    },\r\n    {\r\n      value: \"hi\",\r\n      text: \"Hindi\"\r\n    },\r\n    {\r\n      value: \"pa\",\r\n      text: \"Punjabi\"\r\n    }\r\n  ]\r\n\r\n  constructor(private textService: TextService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  submit() {\r\n    this.loading = true;\r\n    var subscription = this.textService.getTranslation(this.myForm.value.sourceText, this.selectedLanguage)\r\n      .subscribe(\r\n        (res: any) => {\r\n          if (res.success) {\r\n            this.resultObject = res.data;\r\n\r\n          } else {\r\n            this.showText = res.userMessage;\r\n          }\r\n          this.loading = false;\r\n          subscription.unsubscribe();\r\n        },\r\n        (err: any) => {\r\n          console.log(err);\r\n          this.loading = false;\r\n          subscription.unsubscribe();\r\n        });\r\n  }\r\n\r\n  reset() {\r\n    this.showText = \"\";\r\n    this.resultObject = null;\r\n  }\r\n\r\n  getLanguageName() {\r\n    return this.targetLanguages.find(x => x.value == this.selectedLanguage).text;\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"loading\" class=\"spinner-border text-info\" role=\"status\">\r\n      <span class=\"sr-only\">Loading...</span>\r\n</div>\r\n\r\n<div class=\"container\">\r\n      <div class=\"row\">\r\n            <form [formGroup]=\"myForm\" style=\"width: 350px;\" (ngSubmit)=\"submit()\">\r\n                  <input class=\"form-control\" type=\"text\" placeholder=\"Enter/ paste keyphrase, word, paragraph...\"\r\n                        formControlName=\"sourceText\" />\r\n                  <br />\r\n                  <label><strong>Select Target Language</strong></label>\r\n                  <select formControlName=\"targetLanguage\" class=\"form-control\" [(ngModel)]=\"selectedLanguage\">\r\n                        <option *ngFor=\"let option of targetLanguages\" [value]=\"option.value\">\r\n                              {{option.text}}\r\n                        </option>\r\n                  </select>\r\n                  <br />\r\n                  <button type=\"button\" style=\"width: 87px;\" class=\"btn btn-primary form-control\" type=\"submit\">\r\n                        Submit\r\n                  </button>\r\n            </form>\r\n      </div>\r\n      <hr>\r\n      <div class=\"row\">\r\n            <label><b>Result: </b></label>\r\n            <br />\r\n            <p class=\"result-text\" *ngIf=\"showText\">{{ showText }}</p>\r\n\r\n            <div class=\"table-responsive table-bordered\" *ngIf=\"resultObject\">\r\n                  <table class=\"table\">\r\n                        <thead>\r\n                              <tr>\r\n                                    <th scope=\"col\">Detected Input Language</th>\r\n                                    <th scope=\"col\">Translation in ({{getLanguageName()}})</th>\r\n                              </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                              <tr>\r\n                                    <td>{{resultObject.detectedLanguage}}</td>\r\n                                    <td>{{resultObject.translatedText}}</td>\r\n                              </tr>\r\n                        </tbody>\r\n                  </table>\r\n            </div>\r\n\r\n            <button style=\"margin-top: 10px; margin-bottom: -10px;\" *ngIf=\"showText || resultObject\"\r\n                  class=\"btn btn-danger\" (click)=\"reset()\">\r\n                  Clear\r\n            </button>\r\n      </div>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { domain } from \"../../environments/environment\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TextService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getTranslation(data: string, targetLanguage: string) {\r\n    let request = {\r\n      text: data,\r\n      language: targetLanguage\r\n    }\r\n    return this.http.post(`${domain}/api/text/translate`, request)\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n};\r\n\r\nexport const SPEECH_CONFIG = {\r\n  API_KEY: \"7745e44dea9e418688b594f6d425f24e\",\r\n  REGION: \"eastus\",\r\n};\r\n\r\nexport const domain: string = \"http://127.0.0.1:5000\";\r\n//export const domain: string = \"https://cogniapi.azurewebsites.net\";\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"]}